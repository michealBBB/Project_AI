from tensorflow import keras
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing import image
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense, BatchNormalization, Dropout, Flatten, Conv2D, MaxPooling2D
from tensorflow.keras.optimizers import Adam,SGD
import numpy as np
import random
import matplotlib.pyplot as plt
%matplotlib inline
import tensorflow as tf

from keras.models import load_model
import numpy as np
from keras.preprocessing.image import load_img,img_to_array

################################################Khai Báo Một Số Biến Và Đường Dẫn

trainning = '../content/drive/MyDrive/project_AI/train'
test = '../content/drive/MyDrive/project_AI/test'
seed = 10
BATCH_SIZE = 64

################################################Mở Rộng Thêm Lượng Data Bằng Cách Dùng ImageDataGenerator


data_generator = ImageDataGenerator(
        validation_split=0.2,
        rotation_range=20,
        width_shift_range=0.2,
        height_shift_range=0.2,
        rescale=1./255,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True,
        fill_mode='nearest')

val_data_generator = ImageDataGenerator(rescale=1./255, validation_split=0.2)

test_generator = ImageDataGenerator(rescale=1./255)

# Genera/tor data train

train_generator = data_generator.flow_from_directory(trainning, target_size=(150,150), shuffle=True, seed=seed,  # target_size: size ảnh đầu ra sau khi generator
                                            class_mode='categorical', batch_size=BATCH_SIZE, subset="training")  # shuffle=True: sắp xếp dữ liệu theo chữ và số

# Generator data validation
validation_generator = val_data_generator.flow_from_directory(trainning, target_size=(150,150), shuffle=False, seed=seed,
                                                     class_mode='categorical', batch_size=BATCH_SIZE, subset="validation")

# Generator data test
test_generator = test_generator.flow_from_directory(test, target_size=(150,150), shuffle=False, seed=seed,
                                                     class_mode='categorical', batch_size=1) #batch_size = 1 để test từng ảnh 1

nb_train_samples = train_generator.samples
nb_validation_samples = validation_generator.samples
nb_test_samples = test_generator.samples
classes = list(train_generator.class_indices.keys())
print('Classes: '+str(classes))
num_classes  = len(classes)

################################################HIển Thị Ví Dụ Vài Hình Của Tập Dữ liệu

plt.figure(figsize=(15,15))
for i in range(4):    
    plt.subplot(330 + 1 + i)
    batch = train_generator.next()[0]*255
    image = batch[0].astype('uint8')
    plt.imshow(image)
plt.show()

################################################Tạo Convolutionnal Layers 

model = Sequential()
# input layer
model.add(Conv2D(32,(3,3),activation='relu', 
                 padding = 'same', input_shape=(150,150,3))) 
model.add(MaxPooling2D(pool_size=(2, 2)))
# hidden layer
model.add(Conv2D(32,(3,3),activation='relu', 
                 padding = 'same')) 
model.add(MaxPooling2D(pool_size=(2, 2)))
# hidden layer
model.add(Conv2D(64,(3,3),activation='relu', 
                 padding = 'same')) 
model.add(MaxPooling2D(pool_size=(2, 2)))

# output layer
model.add(Flatten())
model.add(Dense(512,activation='relu'))

model.add(Dropout(0.2))
model.add(Dense(15,activation='softmax'))  #15 la so loai gao phan loai

model.summary()

Compile Model

opt=SGD(lr=0.001, momentum=0.9)   # lr toc do hoc
model.compile(optimizer=opt,
              loss='categorical_crossentropy',
              metrics=['accuracy'])

################################################Training Model

#Training
history = model.fit(train_generator,epochs=50,
                    batch_size=16,
                    validation_data=validation_generator,
                    verbose=1)

################################################Lưu các Param vào file h5


model.save('/content/drive/MyDrive/project_AI/rice.h5')

################################################Gọi Param Vào Model_rice Để Phục Vụ Cho Việc Dự Đoán

model_rice = tf.keras.models.load_model('/content/drive/MyDrive/project_AI/rice.h5')

################################################Tiền Xử Lý Ảnh Cần Dự Đoán Và Tiến Hành Dự Đoán

img=load_img('/content/drive/MyDrive/project_AI/pred/gao_lut_tim_than_2.jpg',target_size=(150,150))
plt.imshow(img)
img=img_to_array(img)
img=img.reshape(1,150,150,3)
img=img.astype('float32')
img/=255
np.argmax(model_rice.predict(img),axis=1)[0]
classes[np.argmax(model_rice.predict(img),axis=1)[0]]



